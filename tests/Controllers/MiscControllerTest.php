<?php
/*
 * WebhooksRESTAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace WebhooksRESTAPILib\Tests;

use WebhooksRESTAPILib\APIException;
use WebhooksRESTAPILib\Exceptions;
use WebhooksRESTAPILib\APIHelper;
use WebhooksRESTAPILib\Models;

class MiscControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \WebhooksRESTAPILib\Controllers\MiscController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \WebhooksRESTAPILib\WebhooksRESTAPIClient();
        self::$controller = $client->getMisc();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * TODO: Add Description
     */
    public function testGetNotificationsORA()
    {
        // Parameters for the API call
        $contentType = 'application/json';
        $authorization = 'Basic bmV3LXZpdGFsLWZuYm86MTIzYWJj';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getNotificationsORA($contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testDeleteAWebHook()
    {
        // Parameters for the API call
        $body = APIHelper::deserialize(
            '{\r\n  "eventType": ["payment.authorization.created","payment.capture.created"],\r\n  "url": "https:' .
            '//mysite/callback",\r\n  "status": "active"\r\n}',
            new Models\DeleteAWebHookRequest()
        );
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->deleteAWebHook($body, $contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetNotificationsByStatus()
    {
        // Parameters for the API call
        $deliveryStatus = 'Failed';
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getNotificationsByStatus($deliveryStatus, $contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetNotificationsByDate()
    {
        // Parameters for the API call
        $fromDate = APIHelper::parseDate('2016-08-16');
        $toDate = APIHelper::parseDate('2016-08-20');
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getNotificationsByDate($fromDate, $toDate, $contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetNotifications()
    {
        // Parameters for the API call
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getNotifications($contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testUpdateAWebHook()
    {
        // Parameters for the API call
        $body = APIHelper::deserialize(
            '{\n  "status": "inactive",\n  "url": "http://requestb.in/1msxl041",\n  "eventTypes": [\n    "net.aut' .
            'horize.payment.authorization.created"\n  ]\n}',
            new Models\UpdateAWebHookRequest()
        );
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->updateAWebHook($body, $contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetAWebHook()
    {
        // Parameters for the API call
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getAWebHook($contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetWebHooks()
    {
        // Parameters for the API call
        $contentType = 'application/json';
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getWebHooks($contentType, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testCreateANewWebHook()
    {
        // Parameters for the API call
        $body = APIHelper::deserialize(
            '{\n  "url": "http://requestb.in/14ghojp1",\n  "eventTypes": [\n    "net.authorize.payment.fraud.held' .
            '",\n    "net.authorize.payment.fraud.approved",\n    "net.authorize.payment.fraud.declined",\n    "n' .
            'et.authorize.payment.authcapture.created",\n    "net.authorize.customer.paymentProfile.created",\n  ' .
            '  "net.authorize.customer.paymentProfile.updated",\n    "net.authorize.customer.paymentProfile.delet' .
            'ed"\n  ],\n  "status": "active"\n}',
            new Models\CreateANewWebHookRequest()
        );
        $authorization = 'Basic M2UzYjVINFlMUDo0Z1czOVA2M0JIbW5rNDUy';
        $contentType = 'application/json';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createANewWebHook($body, $authorization, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testSendATestNotification()
    {
        // Parameters for the API call
        $authorization = 'Basic ODluRTRCZWg6N3MyZzN5V0MzVGZDOTJwMg==';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createSendATestNotification($authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetEventTypes()
    {
        // Parameters for the API call
        $authorization = 'Basic M2UzYjVINFlMUDo0Z1czOVA2M0JIbW5rNDUy';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getEventTypes($authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
